-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sepImageFilter_hz_macOp is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    hz_coeff_0_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_coeff_1_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_coeff_2_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_coeff_3_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_coeff_4_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_coeff_5_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_coeff_6_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_window_pixels_0_V : IN STD_LOGIC_VECTOR (15 downto 0);
    hz_window_pixels_1_V : IN STD_LOGIC_VECTOR (15 downto 0);
    hz_window_pixels_2_V : IN STD_LOGIC_VECTOR (15 downto 0);
    hz_window_pixels_3_V : IN STD_LOGIC_VECTOR (15 downto 0);
    hz_window_pixels_4_V : IN STD_LOGIC_VECTOR (15 downto 0);
    hz_window_pixels_5_V : IN STD_LOGIC_VECTOR (15 downto 0);
    hz_window_pixels_6_V : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (26 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of sepImageFilter_hz_macOp is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_true : BOOLEAN := true;

    signal hz_window_pixels_1_V_read_1_reg_259 : STD_LOGIC_VECTOR (15 downto 0);
    signal hz_coeff_1_V_read_1_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_222_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp1_reg_339 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_206_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp3_reg_344 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_214_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp4_reg_349 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_230_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_reg_354 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp2_fu_188_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp2_reg_359 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_252_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_245_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_238_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp4_cast_fu_185_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp3_cast_fu_182_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp2_cast_fu_197_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_cast_8_fu_194_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_206_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_214_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_222_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_230_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_238_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_245_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_252_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_206_ce : STD_LOGIC;
    signal grp_fu_214_ce : STD_LOGIC;
    signal grp_fu_222_ce : STD_LOGIC;
    signal grp_fu_230_ce : STD_LOGIC;
    signal grp_fu_238_ce : STD_LOGIC;
    signal grp_fu_245_ce : STD_LOGIC;
    signal grp_fu_252_ce : STD_LOGIC;
    signal grp_fu_206_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_214_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_222_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_230_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_238_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_245_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_252_p00 : STD_LOGIC_VECTOR (23 downto 0);

    component sepImageFilter_mac_muladd_16ns_8s_24s_25_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component sepImageFilter_mac_muladd_16ns_8s_25s_26_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (24 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component sepImageFilter_mul_mul_16ns_8s_24_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;



begin
    sepImageFilter_mac_muladd_16ns_8s_24s_25_3_U75 : component sepImageFilter_mac_muladd_16ns_8s_24s_25_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_206_p0,
        din1 => hz_coeff_4_V,
        din2 => grp_fu_245_p2,
        ce => grp_fu_206_ce,
        dout => grp_fu_206_p3);

    sepImageFilter_mac_muladd_16ns_8s_24s_25_3_U76 : component sepImageFilter_mac_muladd_16ns_8s_24s_25_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_214_p0,
        din1 => hz_coeff_6_V,
        din2 => grp_fu_238_p2,
        ce => grp_fu_214_ce,
        dout => grp_fu_214_p3);

    sepImageFilter_mac_muladd_16ns_8s_24s_25_3_U77 : component sepImageFilter_mac_muladd_16ns_8s_24s_25_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_222_p0,
        din1 => hz_coeff_2_V,
        din2 => grp_fu_252_p2,
        ce => grp_fu_222_ce,
        dout => grp_fu_222_p3);

    sepImageFilter_mac_muladd_16ns_8s_25s_26_3_U78 : component sepImageFilter_mac_muladd_16ns_8s_25s_26_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 25,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_230_p0,
        din1 => hz_coeff_1_V_read_1_reg_264,
        din2 => tmp1_reg_339,
        ce => grp_fu_230_ce,
        dout => grp_fu_230_p3);

    sepImageFilter_mul_mul_16ns_8s_24_3_U79 : component sepImageFilter_mul_mul_16ns_8s_24_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_238_p0,
        din1 => hz_coeff_5_V,
        ce => grp_fu_238_ce,
        dout => grp_fu_238_p2);

    sepImageFilter_mul_mul_16ns_8s_24_3_U80 : component sepImageFilter_mul_mul_16ns_8s_24_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_245_p0,
        din1 => hz_coeff_3_V,
        ce => grp_fu_245_ce,
        dout => grp_fu_245_p2);

    sepImageFilter_mul_mul_16ns_8s_24_3_U81 : component sepImageFilter_mul_mul_16ns_8s_24_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_252_p0,
        din1 => hz_coeff_0_V,
        ce => grp_fu_252_ce,
        dout => grp_fu_252_p2);




    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                hz_coeff_1_V_read_1_reg_264 <= hz_coeff_1_V;
                hz_window_pixels_1_V_read_1_reg_259 <= hz_window_pixels_1_V;
                tmp1_reg_339 <= grp_fu_222_p3;
                tmp2_reg_359 <= tmp2_fu_188_p2;
                tmp3_reg_344 <= grp_fu_206_p3;
                tmp4_reg_349 <= grp_fu_214_p3;
                tmp_reg_354 <= grp_fu_230_p3;
            end if;
        end if;
    end process;
    ap_return <= std_logic_vector(signed(tmp2_cast_fu_197_p1) + signed(tmp_cast_8_fu_194_p1));

    grp_fu_206_ce_assign_proc : process(ap_ce)
    begin
        if (not((ap_const_logic_1 = ap_ce))) then 
            grp_fu_206_ce <= ap_const_logic_0;
        else 
            grp_fu_206_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_206_p0 <= grp_fu_206_p00(16 - 1 downto 0);
    grp_fu_206_p00 <= std_logic_vector(resize(unsigned(hz_window_pixels_4_V),24));

    grp_fu_214_ce_assign_proc : process(ap_ce)
    begin
        if (not((ap_const_logic_1 = ap_ce))) then 
            grp_fu_214_ce <= ap_const_logic_0;
        else 
            grp_fu_214_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_214_p0 <= grp_fu_214_p00(16 - 1 downto 0);
    grp_fu_214_p00 <= std_logic_vector(resize(unsigned(hz_window_pixels_6_V),24));

    grp_fu_222_ce_assign_proc : process(ap_ce)
    begin
        if (not((ap_const_logic_1 = ap_ce))) then 
            grp_fu_222_ce <= ap_const_logic_0;
        else 
            grp_fu_222_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_222_p0 <= grp_fu_222_p00(16 - 1 downto 0);
    grp_fu_222_p00 <= std_logic_vector(resize(unsigned(hz_window_pixels_2_V),24));

    grp_fu_230_ce_assign_proc : process(ap_ce)
    begin
        if (not((ap_const_logic_1 = ap_ce))) then 
            grp_fu_230_ce <= ap_const_logic_0;
        else 
            grp_fu_230_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_230_p0 <= grp_fu_230_p00(16 - 1 downto 0);
    grp_fu_230_p00 <= std_logic_vector(resize(unsigned(hz_window_pixels_1_V_read_1_reg_259),24));

    grp_fu_238_ce_assign_proc : process(ap_ce)
    begin
        if (not((ap_const_logic_1 = ap_ce))) then 
            grp_fu_238_ce <= ap_const_logic_0;
        else 
            grp_fu_238_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_238_p0 <= grp_fu_238_p00(16 - 1 downto 0);
    grp_fu_238_p00 <= std_logic_vector(resize(unsigned(hz_window_pixels_5_V),24));

    grp_fu_245_ce_assign_proc : process(ap_ce)
    begin
        if (not((ap_const_logic_1 = ap_ce))) then 
            grp_fu_245_ce <= ap_const_logic_0;
        else 
            grp_fu_245_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_245_p0 <= grp_fu_245_p00(16 - 1 downto 0);
    grp_fu_245_p00 <= std_logic_vector(resize(unsigned(hz_window_pixels_3_V),24));

    grp_fu_252_ce_assign_proc : process(ap_ce)
    begin
        if (not((ap_const_logic_1 = ap_ce))) then 
            grp_fu_252_ce <= ap_const_logic_0;
        else 
            grp_fu_252_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_252_p0 <= grp_fu_252_p00(16 - 1 downto 0);
    grp_fu_252_p00 <= std_logic_vector(resize(unsigned(hz_window_pixels_0_V),24));
        tmp2_cast_fu_197_p1 <= std_logic_vector(resize(signed(tmp2_reg_359),27));

    tmp2_fu_188_p2 <= std_logic_vector(signed(tmp4_cast_fu_185_p1) + signed(tmp3_cast_fu_182_p1));
        tmp3_cast_fu_182_p1 <= std_logic_vector(resize(signed(tmp3_reg_344),26));

        tmp4_cast_fu_185_p1 <= std_logic_vector(resize(signed(tmp4_reg_349),26));

        tmp_cast_8_fu_194_p1 <= std_logic_vector(resize(signed(tmp_reg_354),27));

end behav;
