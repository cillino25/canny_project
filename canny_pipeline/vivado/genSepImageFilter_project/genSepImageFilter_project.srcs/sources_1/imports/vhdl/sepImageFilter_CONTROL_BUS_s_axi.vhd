-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity sepImageFilter_CONTROL_BUS_s_axi is
generic (
    C_S_AXI_ADDR_WIDTH    : INTEGER := 9;
    C_S_AXI_DATA_WIDTH    : INTEGER := 32);
port (
    -- axi4 lite slave signals
    ACLK                  :in   STD_LOGIC;
    ARESET                :in   STD_LOGIC;
    ACLK_EN               :in   STD_LOGIC;
    AWADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
    AWVALID               :in   STD_LOGIC;
    AWREADY               :out  STD_LOGIC;
    WDATA                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
    WSTRB                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH/8-1 downto 0);
    WVALID                :in   STD_LOGIC;
    WREADY                :out  STD_LOGIC;
    BRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
    BVALID                :out  STD_LOGIC;
    BREADY                :in   STD_LOGIC;
    ARADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
    ARVALID               :in   STD_LOGIC;
    ARREADY               :out  STD_LOGIC;
    RDATA                 :out  STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
    RRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
    RVALID                :out  STD_LOGIC;
    RREADY                :in   STD_LOGIC;
    interrupt             :out  STD_LOGIC;
    -- user signals
    ap_start              :out  STD_LOGIC;
    ap_done               :in   STD_LOGIC;
    ap_ready              :in   STD_LOGIC;
    ap_idle               :in   STD_LOGIC;
    IMG_WIDTH_V           :out  STD_LOGIC_VECTOR(10 downto 0);
    IMG_HEIGHT_V          :out  STD_LOGIC_VECTOR(10 downto 0);
    hz_kernels_0_0_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    hz_kernels_0_1_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    hz_kernels_0_2_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    hz_kernels_0_3_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    hz_kernels_0_4_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    hz_kernels_0_5_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    hz_kernels_0_6_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    hz_kernels_1_0_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    hz_kernels_1_1_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    hz_kernels_1_2_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    hz_kernels_1_3_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    hz_kernels_1_4_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    hz_kernels_1_5_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    hz_kernels_1_6_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    hz_kernels_2_0_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    hz_kernels_2_1_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    hz_kernels_2_2_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    hz_kernels_2_3_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    hz_kernels_2_4_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    hz_kernels_2_5_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    hz_kernels_2_6_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    vt_kernels_0_0_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    vt_kernels_0_1_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    vt_kernels_0_2_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    vt_kernels_0_3_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    vt_kernels_0_4_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    vt_kernels_0_5_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    vt_kernels_0_6_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    vt_kernels_1_0_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    vt_kernels_1_1_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    vt_kernels_1_2_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    vt_kernels_1_3_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    vt_kernels_1_4_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    vt_kernels_1_5_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    vt_kernels_1_6_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    vt_kernels_2_0_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    vt_kernels_2_1_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    vt_kernels_2_2_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    vt_kernels_2_3_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    vt_kernels_2_4_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    vt_kernels_2_5_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    vt_kernels_2_6_V      :out  STD_LOGIC_VECTOR(7 downto 0);
    config_V              :out  STD_LOGIC_VECTOR(7 downto 0);
    divisor_0_V           :out  STD_LOGIC_VECTOR(19 downto 0);
    divisor_1_V           :out  STD_LOGIC_VECTOR(19 downto 0);
    divisor_2_V           :out  STD_LOGIC_VECTOR(19 downto 0)
);
end entity sepImageFilter_CONTROL_BUS_s_axi;

-- ------------------------Address Info-------------------
-- 0x000 : Control signals
--         bit 0  - ap_start (Read/Write/COH)
--         bit 1  - ap_done (Read/COR)
--         bit 2  - ap_idle (Read)
--         bit 3  - ap_ready (Read)
--         bit 7  - auto_restart (Read/Write)
--         others - reserved
-- 0x004 : Global Interrupt Enable Register
--         bit 0  - Global Interrupt Enable (Read/Write)
--         others - reserved
-- 0x008 : IP Interrupt Enable Register (Read/Write)
--         bit 0  - Channel 0 (ap_done)
--         bit 1  - Channel 1 (ap_ready)
--         others - reserved
-- 0x00c : IP Interrupt Status Register (Read/TOW)
--         bit 0  - Channel 0 (ap_done)
--         bit 1  - Channel 1 (ap_ready)
--         others - reserved
-- 0x010 : Data signal of IMG_WIDTH_V
--         bit 10~0 - IMG_WIDTH_V[10:0] (Read/Write)
--         others   - reserved
-- 0x014 : reserved
-- 0x018 : Data signal of IMG_HEIGHT_V
--         bit 10~0 - IMG_HEIGHT_V[10:0] (Read/Write)
--         others   - reserved
-- 0x01c : reserved
-- 0x020 : Data signal of hz_kernels_0_0_V
--         bit 7~0 - hz_kernels_0_0_V[7:0] (Read/Write)
--         others  - reserved
-- 0x024 : reserved
-- 0x028 : Data signal of hz_kernels_0_1_V
--         bit 7~0 - hz_kernels_0_1_V[7:0] (Read/Write)
--         others  - reserved
-- 0x02c : reserved
-- 0x030 : Data signal of hz_kernels_0_2_V
--         bit 7~0 - hz_kernels_0_2_V[7:0] (Read/Write)
--         others  - reserved
-- 0x034 : reserved
-- 0x038 : Data signal of hz_kernels_0_3_V
--         bit 7~0 - hz_kernels_0_3_V[7:0] (Read/Write)
--         others  - reserved
-- 0x03c : reserved
-- 0x040 : Data signal of hz_kernels_0_4_V
--         bit 7~0 - hz_kernels_0_4_V[7:0] (Read/Write)
--         others  - reserved
-- 0x044 : reserved
-- 0x048 : Data signal of hz_kernels_0_5_V
--         bit 7~0 - hz_kernels_0_5_V[7:0] (Read/Write)
--         others  - reserved
-- 0x04c : reserved
-- 0x050 : Data signal of hz_kernels_0_6_V
--         bit 7~0 - hz_kernels_0_6_V[7:0] (Read/Write)
--         others  - reserved
-- 0x054 : reserved
-- 0x058 : Data signal of hz_kernels_1_0_V
--         bit 7~0 - hz_kernels_1_0_V[7:0] (Read/Write)
--         others  - reserved
-- 0x05c : reserved
-- 0x060 : Data signal of hz_kernels_1_1_V
--         bit 7~0 - hz_kernels_1_1_V[7:0] (Read/Write)
--         others  - reserved
-- 0x064 : reserved
-- 0x068 : Data signal of hz_kernels_1_2_V
--         bit 7~0 - hz_kernels_1_2_V[7:0] (Read/Write)
--         others  - reserved
-- 0x06c : reserved
-- 0x070 : Data signal of hz_kernels_1_3_V
--         bit 7~0 - hz_kernels_1_3_V[7:0] (Read/Write)
--         others  - reserved
-- 0x074 : reserved
-- 0x078 : Data signal of hz_kernels_1_4_V
--         bit 7~0 - hz_kernels_1_4_V[7:0] (Read/Write)
--         others  - reserved
-- 0x07c : reserved
-- 0x080 : Data signal of hz_kernels_1_5_V
--         bit 7~0 - hz_kernels_1_5_V[7:0] (Read/Write)
--         others  - reserved
-- 0x084 : reserved
-- 0x088 : Data signal of hz_kernels_1_6_V
--         bit 7~0 - hz_kernels_1_6_V[7:0] (Read/Write)
--         others  - reserved
-- 0x08c : reserved
-- 0x090 : Data signal of hz_kernels_2_0_V
--         bit 7~0 - hz_kernels_2_0_V[7:0] (Read/Write)
--         others  - reserved
-- 0x094 : reserved
-- 0x098 : Data signal of hz_kernels_2_1_V
--         bit 7~0 - hz_kernels_2_1_V[7:0] (Read/Write)
--         others  - reserved
-- 0x09c : reserved
-- 0x0a0 : Data signal of hz_kernels_2_2_V
--         bit 7~0 - hz_kernels_2_2_V[7:0] (Read/Write)
--         others  - reserved
-- 0x0a4 : reserved
-- 0x0a8 : Data signal of hz_kernels_2_3_V
--         bit 7~0 - hz_kernels_2_3_V[7:0] (Read/Write)
--         others  - reserved
-- 0x0ac : reserved
-- 0x0b0 : Data signal of hz_kernels_2_4_V
--         bit 7~0 - hz_kernels_2_4_V[7:0] (Read/Write)
--         others  - reserved
-- 0x0b4 : reserved
-- 0x0b8 : Data signal of hz_kernels_2_5_V
--         bit 7~0 - hz_kernels_2_5_V[7:0] (Read/Write)
--         others  - reserved
-- 0x0bc : reserved
-- 0x0c0 : Data signal of hz_kernels_2_6_V
--         bit 7~0 - hz_kernels_2_6_V[7:0] (Read/Write)
--         others  - reserved
-- 0x0c4 : reserved
-- 0x0c8 : Data signal of vt_kernels_0_0_V
--         bit 7~0 - vt_kernels_0_0_V[7:0] (Read/Write)
--         others  - reserved
-- 0x0cc : reserved
-- 0x0d0 : Data signal of vt_kernels_0_1_V
--         bit 7~0 - vt_kernels_0_1_V[7:0] (Read/Write)
--         others  - reserved
-- 0x0d4 : reserved
-- 0x0d8 : Data signal of vt_kernels_0_2_V
--         bit 7~0 - vt_kernels_0_2_V[7:0] (Read/Write)
--         others  - reserved
-- 0x0dc : reserved
-- 0x0e0 : Data signal of vt_kernels_0_3_V
--         bit 7~0 - vt_kernels_0_3_V[7:0] (Read/Write)
--         others  - reserved
-- 0x0e4 : reserved
-- 0x0e8 : Data signal of vt_kernels_0_4_V
--         bit 7~0 - vt_kernels_0_4_V[7:0] (Read/Write)
--         others  - reserved
-- 0x0ec : reserved
-- 0x0f0 : Data signal of vt_kernels_0_5_V
--         bit 7~0 - vt_kernels_0_5_V[7:0] (Read/Write)
--         others  - reserved
-- 0x0f4 : reserved
-- 0x0f8 : Data signal of vt_kernels_0_6_V
--         bit 7~0 - vt_kernels_0_6_V[7:0] (Read/Write)
--         others  - reserved
-- 0x0fc : reserved
-- 0x100 : Data signal of vt_kernels_1_0_V
--         bit 7~0 - vt_kernels_1_0_V[7:0] (Read/Write)
--         others  - reserved
-- 0x104 : reserved
-- 0x108 : Data signal of vt_kernels_1_1_V
--         bit 7~0 - vt_kernels_1_1_V[7:0] (Read/Write)
--         others  - reserved
-- 0x10c : reserved
-- 0x110 : Data signal of vt_kernels_1_2_V
--         bit 7~0 - vt_kernels_1_2_V[7:0] (Read/Write)
--         others  - reserved
-- 0x114 : reserved
-- 0x118 : Data signal of vt_kernels_1_3_V
--         bit 7~0 - vt_kernels_1_3_V[7:0] (Read/Write)
--         others  - reserved
-- 0x11c : reserved
-- 0x120 : Data signal of vt_kernels_1_4_V
--         bit 7~0 - vt_kernels_1_4_V[7:0] (Read/Write)
--         others  - reserved
-- 0x124 : reserved
-- 0x128 : Data signal of vt_kernels_1_5_V
--         bit 7~0 - vt_kernels_1_5_V[7:0] (Read/Write)
--         others  - reserved
-- 0x12c : reserved
-- 0x130 : Data signal of vt_kernels_1_6_V
--         bit 7~0 - vt_kernels_1_6_V[7:0] (Read/Write)
--         others  - reserved
-- 0x134 : reserved
-- 0x138 : Data signal of vt_kernels_2_0_V
--         bit 7~0 - vt_kernels_2_0_V[7:0] (Read/Write)
--         others  - reserved
-- 0x13c : reserved
-- 0x140 : Data signal of vt_kernels_2_1_V
--         bit 7~0 - vt_kernels_2_1_V[7:0] (Read/Write)
--         others  - reserved
-- 0x144 : reserved
-- 0x148 : Data signal of vt_kernels_2_2_V
--         bit 7~0 - vt_kernels_2_2_V[7:0] (Read/Write)
--         others  - reserved
-- 0x14c : reserved
-- 0x150 : Data signal of vt_kernels_2_3_V
--         bit 7~0 - vt_kernels_2_3_V[7:0] (Read/Write)
--         others  - reserved
-- 0x154 : reserved
-- 0x158 : Data signal of vt_kernels_2_4_V
--         bit 7~0 - vt_kernels_2_4_V[7:0] (Read/Write)
--         others  - reserved
-- 0x15c : reserved
-- 0x160 : Data signal of vt_kernels_2_5_V
--         bit 7~0 - vt_kernels_2_5_V[7:0] (Read/Write)
--         others  - reserved
-- 0x164 : reserved
-- 0x168 : Data signal of vt_kernels_2_6_V
--         bit 7~0 - vt_kernels_2_6_V[7:0] (Read/Write)
--         others  - reserved
-- 0x16c : reserved
-- 0x170 : Data signal of config_V
--         bit 7~0 - config_V[7:0] (Read/Write)
--         others  - reserved
-- 0x174 : reserved
-- 0x178 : Data signal of divisor_0_V
--         bit 19~0 - divisor_0_V[19:0] (Read/Write)
--         others   - reserved
-- 0x17c : reserved
-- 0x180 : Data signal of divisor_1_V
--         bit 19~0 - divisor_1_V[19:0] (Read/Write)
--         others   - reserved
-- 0x184 : reserved
-- 0x188 : Data signal of divisor_2_V
--         bit 19~0 - divisor_2_V[19:0] (Read/Write)
--         others   - reserved
-- 0x18c : reserved
-- (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

architecture behave of sepImageFilter_CONTROL_BUS_s_axi is
    type states is (wridle, wrdata, wrresp, rdidle, rddata);  -- read and write fsm states
    signal wstate, wnext, rstate, rnext: states;
    constant ADDR_AP_CTRL                 : INTEGER := 16#000#;
    constant ADDR_GIE                     : INTEGER := 16#004#;
    constant ADDR_IER                     : INTEGER := 16#008#;
    constant ADDR_ISR                     : INTEGER := 16#00c#;
    constant ADDR_IMG_WIDTH_V_DATA_0      : INTEGER := 16#010#;
    constant ADDR_IMG_WIDTH_V_CTRL        : INTEGER := 16#014#;
    constant ADDR_IMG_HEIGHT_V_DATA_0     : INTEGER := 16#018#;
    constant ADDR_IMG_HEIGHT_V_CTRL       : INTEGER := 16#01c#;
    constant ADDR_HZ_KERNELS_0_0_V_DATA_0 : INTEGER := 16#020#;
    constant ADDR_HZ_KERNELS_0_0_V_CTRL   : INTEGER := 16#024#;
    constant ADDR_HZ_KERNELS_0_1_V_DATA_0 : INTEGER := 16#028#;
    constant ADDR_HZ_KERNELS_0_1_V_CTRL   : INTEGER := 16#02c#;
    constant ADDR_HZ_KERNELS_0_2_V_DATA_0 : INTEGER := 16#030#;
    constant ADDR_HZ_KERNELS_0_2_V_CTRL   : INTEGER := 16#034#;
    constant ADDR_HZ_KERNELS_0_3_V_DATA_0 : INTEGER := 16#038#;
    constant ADDR_HZ_KERNELS_0_3_V_CTRL   : INTEGER := 16#03c#;
    constant ADDR_HZ_KERNELS_0_4_V_DATA_0 : INTEGER := 16#040#;
    constant ADDR_HZ_KERNELS_0_4_V_CTRL   : INTEGER := 16#044#;
    constant ADDR_HZ_KERNELS_0_5_V_DATA_0 : INTEGER := 16#048#;
    constant ADDR_HZ_KERNELS_0_5_V_CTRL   : INTEGER := 16#04c#;
    constant ADDR_HZ_KERNELS_0_6_V_DATA_0 : INTEGER := 16#050#;
    constant ADDR_HZ_KERNELS_0_6_V_CTRL   : INTEGER := 16#054#;
    constant ADDR_HZ_KERNELS_1_0_V_DATA_0 : INTEGER := 16#058#;
    constant ADDR_HZ_KERNELS_1_0_V_CTRL   : INTEGER := 16#05c#;
    constant ADDR_HZ_KERNELS_1_1_V_DATA_0 : INTEGER := 16#060#;
    constant ADDR_HZ_KERNELS_1_1_V_CTRL   : INTEGER := 16#064#;
    constant ADDR_HZ_KERNELS_1_2_V_DATA_0 : INTEGER := 16#068#;
    constant ADDR_HZ_KERNELS_1_2_V_CTRL   : INTEGER := 16#06c#;
    constant ADDR_HZ_KERNELS_1_3_V_DATA_0 : INTEGER := 16#070#;
    constant ADDR_HZ_KERNELS_1_3_V_CTRL   : INTEGER := 16#074#;
    constant ADDR_HZ_KERNELS_1_4_V_DATA_0 : INTEGER := 16#078#;
    constant ADDR_HZ_KERNELS_1_4_V_CTRL   : INTEGER := 16#07c#;
    constant ADDR_HZ_KERNELS_1_5_V_DATA_0 : INTEGER := 16#080#;
    constant ADDR_HZ_KERNELS_1_5_V_CTRL   : INTEGER := 16#084#;
    constant ADDR_HZ_KERNELS_1_6_V_DATA_0 : INTEGER := 16#088#;
    constant ADDR_HZ_KERNELS_1_6_V_CTRL   : INTEGER := 16#08c#;
    constant ADDR_HZ_KERNELS_2_0_V_DATA_0 : INTEGER := 16#090#;
    constant ADDR_HZ_KERNELS_2_0_V_CTRL   : INTEGER := 16#094#;
    constant ADDR_HZ_KERNELS_2_1_V_DATA_0 : INTEGER := 16#098#;
    constant ADDR_HZ_KERNELS_2_1_V_CTRL   : INTEGER := 16#09c#;
    constant ADDR_HZ_KERNELS_2_2_V_DATA_0 : INTEGER := 16#0a0#;
    constant ADDR_HZ_KERNELS_2_2_V_CTRL   : INTEGER := 16#0a4#;
    constant ADDR_HZ_KERNELS_2_3_V_DATA_0 : INTEGER := 16#0a8#;
    constant ADDR_HZ_KERNELS_2_3_V_CTRL   : INTEGER := 16#0ac#;
    constant ADDR_HZ_KERNELS_2_4_V_DATA_0 : INTEGER := 16#0b0#;
    constant ADDR_HZ_KERNELS_2_4_V_CTRL   : INTEGER := 16#0b4#;
    constant ADDR_HZ_KERNELS_2_5_V_DATA_0 : INTEGER := 16#0b8#;
    constant ADDR_HZ_KERNELS_2_5_V_CTRL   : INTEGER := 16#0bc#;
    constant ADDR_HZ_KERNELS_2_6_V_DATA_0 : INTEGER := 16#0c0#;
    constant ADDR_HZ_KERNELS_2_6_V_CTRL   : INTEGER := 16#0c4#;
    constant ADDR_VT_KERNELS_0_0_V_DATA_0 : INTEGER := 16#0c8#;
    constant ADDR_VT_KERNELS_0_0_V_CTRL   : INTEGER := 16#0cc#;
    constant ADDR_VT_KERNELS_0_1_V_DATA_0 : INTEGER := 16#0d0#;
    constant ADDR_VT_KERNELS_0_1_V_CTRL   : INTEGER := 16#0d4#;
    constant ADDR_VT_KERNELS_0_2_V_DATA_0 : INTEGER := 16#0d8#;
    constant ADDR_VT_KERNELS_0_2_V_CTRL   : INTEGER := 16#0dc#;
    constant ADDR_VT_KERNELS_0_3_V_DATA_0 : INTEGER := 16#0e0#;
    constant ADDR_VT_KERNELS_0_3_V_CTRL   : INTEGER := 16#0e4#;
    constant ADDR_VT_KERNELS_0_4_V_DATA_0 : INTEGER := 16#0e8#;
    constant ADDR_VT_KERNELS_0_4_V_CTRL   : INTEGER := 16#0ec#;
    constant ADDR_VT_KERNELS_0_5_V_DATA_0 : INTEGER := 16#0f0#;
    constant ADDR_VT_KERNELS_0_5_V_CTRL   : INTEGER := 16#0f4#;
    constant ADDR_VT_KERNELS_0_6_V_DATA_0 : INTEGER := 16#0f8#;
    constant ADDR_VT_KERNELS_0_6_V_CTRL   : INTEGER := 16#0fc#;
    constant ADDR_VT_KERNELS_1_0_V_DATA_0 : INTEGER := 16#100#;
    constant ADDR_VT_KERNELS_1_0_V_CTRL   : INTEGER := 16#104#;
    constant ADDR_VT_KERNELS_1_1_V_DATA_0 : INTEGER := 16#108#;
    constant ADDR_VT_KERNELS_1_1_V_CTRL   : INTEGER := 16#10c#;
    constant ADDR_VT_KERNELS_1_2_V_DATA_0 : INTEGER := 16#110#;
    constant ADDR_VT_KERNELS_1_2_V_CTRL   : INTEGER := 16#114#;
    constant ADDR_VT_KERNELS_1_3_V_DATA_0 : INTEGER := 16#118#;
    constant ADDR_VT_KERNELS_1_3_V_CTRL   : INTEGER := 16#11c#;
    constant ADDR_VT_KERNELS_1_4_V_DATA_0 : INTEGER := 16#120#;
    constant ADDR_VT_KERNELS_1_4_V_CTRL   : INTEGER := 16#124#;
    constant ADDR_VT_KERNELS_1_5_V_DATA_0 : INTEGER := 16#128#;
    constant ADDR_VT_KERNELS_1_5_V_CTRL   : INTEGER := 16#12c#;
    constant ADDR_VT_KERNELS_1_6_V_DATA_0 : INTEGER := 16#130#;
    constant ADDR_VT_KERNELS_1_6_V_CTRL   : INTEGER := 16#134#;
    constant ADDR_VT_KERNELS_2_0_V_DATA_0 : INTEGER := 16#138#;
    constant ADDR_VT_KERNELS_2_0_V_CTRL   : INTEGER := 16#13c#;
    constant ADDR_VT_KERNELS_2_1_V_DATA_0 : INTEGER := 16#140#;
    constant ADDR_VT_KERNELS_2_1_V_CTRL   : INTEGER := 16#144#;
    constant ADDR_VT_KERNELS_2_2_V_DATA_0 : INTEGER := 16#148#;
    constant ADDR_VT_KERNELS_2_2_V_CTRL   : INTEGER := 16#14c#;
    constant ADDR_VT_KERNELS_2_3_V_DATA_0 : INTEGER := 16#150#;
    constant ADDR_VT_KERNELS_2_3_V_CTRL   : INTEGER := 16#154#;
    constant ADDR_VT_KERNELS_2_4_V_DATA_0 : INTEGER := 16#158#;
    constant ADDR_VT_KERNELS_2_4_V_CTRL   : INTEGER := 16#15c#;
    constant ADDR_VT_KERNELS_2_5_V_DATA_0 : INTEGER := 16#160#;
    constant ADDR_VT_KERNELS_2_5_V_CTRL   : INTEGER := 16#164#;
    constant ADDR_VT_KERNELS_2_6_V_DATA_0 : INTEGER := 16#168#;
    constant ADDR_VT_KERNELS_2_6_V_CTRL   : INTEGER := 16#16c#;
    constant ADDR_CONFIG_V_DATA_0         : INTEGER := 16#170#;
    constant ADDR_CONFIG_V_CTRL           : INTEGER := 16#174#;
    constant ADDR_DIVISOR_0_V_DATA_0      : INTEGER := 16#178#;
    constant ADDR_DIVISOR_0_V_CTRL        : INTEGER := 16#17c#;
    constant ADDR_DIVISOR_1_V_DATA_0      : INTEGER := 16#180#;
    constant ADDR_DIVISOR_1_V_CTRL        : INTEGER := 16#184#;
    constant ADDR_DIVISOR_2_V_DATA_0      : INTEGER := 16#188#;
    constant ADDR_DIVISOR_2_V_CTRL        : INTEGER := 16#18c#;
    constant ADDR_BITS         : INTEGER := 9;

    signal waddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal wmask               : UNSIGNED(31 downto 0);
    signal aw_hs               : STD_LOGIC;
    signal w_hs                : STD_LOGIC;
    signal rdata_data          : UNSIGNED(31 downto 0);
    signal ar_hs               : STD_LOGIC;
    signal raddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal AWREADY_t           : STD_LOGIC;
    signal WREADY_t            : STD_LOGIC;
    signal ARREADY_t           : STD_LOGIC;
    signal RVALID_t            : STD_LOGIC;
    -- internal registers
    signal int_ap_idle         : STD_LOGIC;
    signal int_ap_ready        : STD_LOGIC;
    signal int_ap_done         : STD_LOGIC;
    signal int_ap_start        : STD_LOGIC;
    signal int_auto_restart    : STD_LOGIC;
    signal int_gie             : STD_LOGIC;
    signal int_ier             : UNSIGNED(1 downto 0);
    signal int_isr             : UNSIGNED(1 downto 0);
    signal int_IMG_WIDTH_V     : UNSIGNED(10 downto 0);
    signal int_IMG_HEIGHT_V    : UNSIGNED(10 downto 0);
    signal int_hz_kernels_0_0_V : UNSIGNED(7 downto 0);
    signal int_hz_kernels_0_1_V : UNSIGNED(7 downto 0);
    signal int_hz_kernels_0_2_V : UNSIGNED(7 downto 0);
    signal int_hz_kernels_0_3_V : UNSIGNED(7 downto 0);
    signal int_hz_kernels_0_4_V : UNSIGNED(7 downto 0);
    signal int_hz_kernels_0_5_V : UNSIGNED(7 downto 0);
    signal int_hz_kernels_0_6_V : UNSIGNED(7 downto 0);
    signal int_hz_kernels_1_0_V : UNSIGNED(7 downto 0);
    signal int_hz_kernels_1_1_V : UNSIGNED(7 downto 0);
    signal int_hz_kernels_1_2_V : UNSIGNED(7 downto 0);
    signal int_hz_kernels_1_3_V : UNSIGNED(7 downto 0);
    signal int_hz_kernels_1_4_V : UNSIGNED(7 downto 0);
    signal int_hz_kernels_1_5_V : UNSIGNED(7 downto 0);
    signal int_hz_kernels_1_6_V : UNSIGNED(7 downto 0);
    signal int_hz_kernels_2_0_V : UNSIGNED(7 downto 0);
    signal int_hz_kernels_2_1_V : UNSIGNED(7 downto 0);
    signal int_hz_kernels_2_2_V : UNSIGNED(7 downto 0);
    signal int_hz_kernels_2_3_V : UNSIGNED(7 downto 0);
    signal int_hz_kernels_2_4_V : UNSIGNED(7 downto 0);
    signal int_hz_kernels_2_5_V : UNSIGNED(7 downto 0);
    signal int_hz_kernels_2_6_V : UNSIGNED(7 downto 0);
    signal int_vt_kernels_0_0_V : UNSIGNED(7 downto 0);
    signal int_vt_kernels_0_1_V : UNSIGNED(7 downto 0);
    signal int_vt_kernels_0_2_V : UNSIGNED(7 downto 0);
    signal int_vt_kernels_0_3_V : UNSIGNED(7 downto 0);
    signal int_vt_kernels_0_4_V : UNSIGNED(7 downto 0);
    signal int_vt_kernels_0_5_V : UNSIGNED(7 downto 0);
    signal int_vt_kernels_0_6_V : UNSIGNED(7 downto 0);
    signal int_vt_kernels_1_0_V : UNSIGNED(7 downto 0);
    signal int_vt_kernels_1_1_V : UNSIGNED(7 downto 0);
    signal int_vt_kernels_1_2_V : UNSIGNED(7 downto 0);
    signal int_vt_kernels_1_3_V : UNSIGNED(7 downto 0);
    signal int_vt_kernels_1_4_V : UNSIGNED(7 downto 0);
    signal int_vt_kernels_1_5_V : UNSIGNED(7 downto 0);
    signal int_vt_kernels_1_6_V : UNSIGNED(7 downto 0);
    signal int_vt_kernels_2_0_V : UNSIGNED(7 downto 0);
    signal int_vt_kernels_2_1_V : UNSIGNED(7 downto 0);
    signal int_vt_kernels_2_2_V : UNSIGNED(7 downto 0);
    signal int_vt_kernels_2_3_V : UNSIGNED(7 downto 0);
    signal int_vt_kernels_2_4_V : UNSIGNED(7 downto 0);
    signal int_vt_kernels_2_5_V : UNSIGNED(7 downto 0);
    signal int_vt_kernels_2_6_V : UNSIGNED(7 downto 0);
    signal int_config_V        : UNSIGNED(7 downto 0);
    signal int_divisor_0_V     : UNSIGNED(19 downto 0);
    signal int_divisor_1_V     : UNSIGNED(19 downto 0);
    signal int_divisor_2_V     : UNSIGNED(19 downto 0);


begin
-- ----------------------- Instantiation------------------

-- ----------------------- AXI WRITE ---------------------
    AWREADY_t <=  '1' when wstate = wridle else '0';
    AWREADY   <=  AWREADY_t;
    WREADY_t  <=  '1' when wstate = wrdata else '0';
    WREADY    <=  WREADY_t;
    BRESP     <=  "00";  -- OKAY
    BVALID    <=  '1' when wstate = wrresp else '0';
    wmask     <=  (31 downto 24 => WSTRB(3), 23 downto 16 => WSTRB(2), 15 downto 8 => WSTRB(1), 7 downto 0 => WSTRB(0));
    aw_hs     <=  AWVALID and AWREADY_t;
    w_hs      <=  WVALID and WREADY_t;

    -- write FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                wstate <= wridle;
            elsif (ACLK_EN = '1') then
                wstate <= wnext;
            end if;
        end if;
    end process;

    process (wstate, AWVALID, WVALID, BREADY)
    begin
        case (wstate) is
        when wridle =>
            if (AWVALID = '1') then
                wnext <= wrdata;
            else
                wnext <= wridle;
            end if;
        when wrdata =>
            if (WVALID = '1') then
                wnext <= wrresp;
            else
                wnext <= wrdata;
            end if;
        when wrresp =>
            if (BREADY = '1') then
                wnext <= wridle;
            else
                wnext <= wrresp;
            end if;
        when others =>
            wnext <= wridle;
        end case;
    end process;

    waddr_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (aw_hs = '1') then
                    waddr <= UNSIGNED(AWADDR(ADDR_BITS-1 downto 0));
                end if;
            end if;
        end if;
    end process;

-- ----------------------- AXI READ ----------------------
    ARREADY_t <= '1' when (rstate = rdidle) else '0';
    ARREADY <= ARREADY_t;
    RDATA   <= STD_LOGIC_VECTOR(rdata_data);
    RRESP   <= "00";  -- OKAY
    RVALID_t  <= '1' when (rstate = rddata) else '0';
    RVALID    <= RVALID_t;
    ar_hs   <= ARVALID and ARREADY_t;
    raddr   <= UNSIGNED(ARADDR(ADDR_BITS-1 downto 0));

    -- read FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                rstate <= rdidle;
            elsif (ACLK_EN = '1') then
                rstate <= rnext;
            end if;
        end if;
    end process;

    process (rstate, ARVALID, RREADY, RVALID_t)
    begin
        case (rstate) is
        when rdidle =>
            if (ARVALID = '1') then
                rnext <= rddata;
            else
                rnext <= rdidle;
            end if;
        when rddata =>
            if (RREADY = '1' and RVALID_t = '1') then
                rnext <= rdidle;
            else
                rnext <= rddata;
            end if;
        when others =>
            rnext <= rdidle;
        end case;
    end process;

    rdata_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (ar_hs = '1') then
                    case (TO_INTEGER(raddr)) is
                    when ADDR_AP_CTRL =>
                        rdata_data <= (7 => int_auto_restart, 3 => int_ap_ready, 2 => int_ap_idle, 1 => int_ap_done, 0 => int_ap_start, others => '0');
                    when ADDR_GIE =>
                        rdata_data <= (0 => int_gie, others => '0');
                    when ADDR_IER =>
                        rdata_data <= (1 => int_ier(1), 0 => int_ier(0), others => '0');
                    when ADDR_ISR =>
                        rdata_data <= (1 => int_isr(1), 0 => int_isr(0), others => '0');
                    when ADDR_IMG_WIDTH_V_DATA_0 =>
                        rdata_data <= RESIZE(int_IMG_WIDTH_V(10 downto 0), 32);
                    when ADDR_IMG_HEIGHT_V_DATA_0 =>
                        rdata_data <= RESIZE(int_IMG_HEIGHT_V(10 downto 0), 32);
                    when ADDR_HZ_KERNELS_0_0_V_DATA_0 =>
                        rdata_data <= RESIZE(int_hz_kernels_0_0_V(7 downto 0), 32);
                    when ADDR_HZ_KERNELS_0_1_V_DATA_0 =>
                        rdata_data <= RESIZE(int_hz_kernels_0_1_V(7 downto 0), 32);
                    when ADDR_HZ_KERNELS_0_2_V_DATA_0 =>
                        rdata_data <= RESIZE(int_hz_kernels_0_2_V(7 downto 0), 32);
                    when ADDR_HZ_KERNELS_0_3_V_DATA_0 =>
                        rdata_data <= RESIZE(int_hz_kernels_0_3_V(7 downto 0), 32);
                    when ADDR_HZ_KERNELS_0_4_V_DATA_0 =>
                        rdata_data <= RESIZE(int_hz_kernels_0_4_V(7 downto 0), 32);
                    when ADDR_HZ_KERNELS_0_5_V_DATA_0 =>
                        rdata_data <= RESIZE(int_hz_kernels_0_5_V(7 downto 0), 32);
                    when ADDR_HZ_KERNELS_0_6_V_DATA_0 =>
                        rdata_data <= RESIZE(int_hz_kernels_0_6_V(7 downto 0), 32);
                    when ADDR_HZ_KERNELS_1_0_V_DATA_0 =>
                        rdata_data <= RESIZE(int_hz_kernels_1_0_V(7 downto 0), 32);
                    when ADDR_HZ_KERNELS_1_1_V_DATA_0 =>
                        rdata_data <= RESIZE(int_hz_kernels_1_1_V(7 downto 0), 32);
                    when ADDR_HZ_KERNELS_1_2_V_DATA_0 =>
                        rdata_data <= RESIZE(int_hz_kernels_1_2_V(7 downto 0), 32);
                    when ADDR_HZ_KERNELS_1_3_V_DATA_0 =>
                        rdata_data <= RESIZE(int_hz_kernels_1_3_V(7 downto 0), 32);
                    when ADDR_HZ_KERNELS_1_4_V_DATA_0 =>
                        rdata_data <= RESIZE(int_hz_kernels_1_4_V(7 downto 0), 32);
                    when ADDR_HZ_KERNELS_1_5_V_DATA_0 =>
                        rdata_data <= RESIZE(int_hz_kernels_1_5_V(7 downto 0), 32);
                    when ADDR_HZ_KERNELS_1_6_V_DATA_0 =>
                        rdata_data <= RESIZE(int_hz_kernels_1_6_V(7 downto 0), 32);
                    when ADDR_HZ_KERNELS_2_0_V_DATA_0 =>
                        rdata_data <= RESIZE(int_hz_kernels_2_0_V(7 downto 0), 32);
                    when ADDR_HZ_KERNELS_2_1_V_DATA_0 =>
                        rdata_data <= RESIZE(int_hz_kernels_2_1_V(7 downto 0), 32);
                    when ADDR_HZ_KERNELS_2_2_V_DATA_0 =>
                        rdata_data <= RESIZE(int_hz_kernels_2_2_V(7 downto 0), 32);
                    when ADDR_HZ_KERNELS_2_3_V_DATA_0 =>
                        rdata_data <= RESIZE(int_hz_kernels_2_3_V(7 downto 0), 32);
                    when ADDR_HZ_KERNELS_2_4_V_DATA_0 =>
                        rdata_data <= RESIZE(int_hz_kernels_2_4_V(7 downto 0), 32);
                    when ADDR_HZ_KERNELS_2_5_V_DATA_0 =>
                        rdata_data <= RESIZE(int_hz_kernels_2_5_V(7 downto 0), 32);
                    when ADDR_HZ_KERNELS_2_6_V_DATA_0 =>
                        rdata_data <= RESIZE(int_hz_kernels_2_6_V(7 downto 0), 32);
                    when ADDR_VT_KERNELS_0_0_V_DATA_0 =>
                        rdata_data <= RESIZE(int_vt_kernels_0_0_V(7 downto 0), 32);
                    when ADDR_VT_KERNELS_0_1_V_DATA_0 =>
                        rdata_data <= RESIZE(int_vt_kernels_0_1_V(7 downto 0), 32);
                    when ADDR_VT_KERNELS_0_2_V_DATA_0 =>
                        rdata_data <= RESIZE(int_vt_kernels_0_2_V(7 downto 0), 32);
                    when ADDR_VT_KERNELS_0_3_V_DATA_0 =>
                        rdata_data <= RESIZE(int_vt_kernels_0_3_V(7 downto 0), 32);
                    when ADDR_VT_KERNELS_0_4_V_DATA_0 =>
                        rdata_data <= RESIZE(int_vt_kernels_0_4_V(7 downto 0), 32);
                    when ADDR_VT_KERNELS_0_5_V_DATA_0 =>
                        rdata_data <= RESIZE(int_vt_kernels_0_5_V(7 downto 0), 32);
                    when ADDR_VT_KERNELS_0_6_V_DATA_0 =>
                        rdata_data <= RESIZE(int_vt_kernels_0_6_V(7 downto 0), 32);
                    when ADDR_VT_KERNELS_1_0_V_DATA_0 =>
                        rdata_data <= RESIZE(int_vt_kernels_1_0_V(7 downto 0), 32);
                    when ADDR_VT_KERNELS_1_1_V_DATA_0 =>
                        rdata_data <= RESIZE(int_vt_kernels_1_1_V(7 downto 0), 32);
                    when ADDR_VT_KERNELS_1_2_V_DATA_0 =>
                        rdata_data <= RESIZE(int_vt_kernels_1_2_V(7 downto 0), 32);
                    when ADDR_VT_KERNELS_1_3_V_DATA_0 =>
                        rdata_data <= RESIZE(int_vt_kernels_1_3_V(7 downto 0), 32);
                    when ADDR_VT_KERNELS_1_4_V_DATA_0 =>
                        rdata_data <= RESIZE(int_vt_kernels_1_4_V(7 downto 0), 32);
                    when ADDR_VT_KERNELS_1_5_V_DATA_0 =>
                        rdata_data <= RESIZE(int_vt_kernels_1_5_V(7 downto 0), 32);
                    when ADDR_VT_KERNELS_1_6_V_DATA_0 =>
                        rdata_data <= RESIZE(int_vt_kernels_1_6_V(7 downto 0), 32);
                    when ADDR_VT_KERNELS_2_0_V_DATA_0 =>
                        rdata_data <= RESIZE(int_vt_kernels_2_0_V(7 downto 0), 32);
                    when ADDR_VT_KERNELS_2_1_V_DATA_0 =>
                        rdata_data <= RESIZE(int_vt_kernels_2_1_V(7 downto 0), 32);
                    when ADDR_VT_KERNELS_2_2_V_DATA_0 =>
                        rdata_data <= RESIZE(int_vt_kernels_2_2_V(7 downto 0), 32);
                    when ADDR_VT_KERNELS_2_3_V_DATA_0 =>
                        rdata_data <= RESIZE(int_vt_kernels_2_3_V(7 downto 0), 32);
                    when ADDR_VT_KERNELS_2_4_V_DATA_0 =>
                        rdata_data <= RESIZE(int_vt_kernels_2_4_V(7 downto 0), 32);
                    when ADDR_VT_KERNELS_2_5_V_DATA_0 =>
                        rdata_data <= RESIZE(int_vt_kernels_2_5_V(7 downto 0), 32);
                    when ADDR_VT_KERNELS_2_6_V_DATA_0 =>
                        rdata_data <= RESIZE(int_vt_kernels_2_6_V(7 downto 0), 32);
                    when ADDR_CONFIG_V_DATA_0 =>
                        rdata_data <= RESIZE(int_config_V(7 downto 0), 32);
                    when ADDR_DIVISOR_0_V_DATA_0 =>
                        rdata_data <= RESIZE(int_divisor_0_V(19 downto 0), 32);
                    when ADDR_DIVISOR_1_V_DATA_0 =>
                        rdata_data <= RESIZE(int_divisor_1_V(19 downto 0), 32);
                    when ADDR_DIVISOR_2_V_DATA_0 =>
                        rdata_data <= RESIZE(int_divisor_2_V(19 downto 0), 32);
                    when others =>
                        rdata_data <= (others => '0');
                    end case;
                end if;
            end if;
        end if;
    end process;

-- ----------------------- Register logic ----------------
    interrupt            <= int_gie and (int_isr(0) or int_isr(1));
    ap_start             <= int_ap_start;
    int_ap_idle          <= ap_idle;
    int_ap_ready         <= ap_ready;
    IMG_WIDTH_V          <= STD_LOGIC_VECTOR(int_IMG_WIDTH_V);
    IMG_HEIGHT_V         <= STD_LOGIC_VECTOR(int_IMG_HEIGHT_V);
    hz_kernels_0_0_V     <= STD_LOGIC_VECTOR(int_hz_kernels_0_0_V);
    hz_kernels_0_1_V     <= STD_LOGIC_VECTOR(int_hz_kernels_0_1_V);
    hz_kernels_0_2_V     <= STD_LOGIC_VECTOR(int_hz_kernels_0_2_V);
    hz_kernels_0_3_V     <= STD_LOGIC_VECTOR(int_hz_kernels_0_3_V);
    hz_kernels_0_4_V     <= STD_LOGIC_VECTOR(int_hz_kernels_0_4_V);
    hz_kernels_0_5_V     <= STD_LOGIC_VECTOR(int_hz_kernels_0_5_V);
    hz_kernels_0_6_V     <= STD_LOGIC_VECTOR(int_hz_kernels_0_6_V);
    hz_kernels_1_0_V     <= STD_LOGIC_VECTOR(int_hz_kernels_1_0_V);
    hz_kernels_1_1_V     <= STD_LOGIC_VECTOR(int_hz_kernels_1_1_V);
    hz_kernels_1_2_V     <= STD_LOGIC_VECTOR(int_hz_kernels_1_2_V);
    hz_kernels_1_3_V     <= STD_LOGIC_VECTOR(int_hz_kernels_1_3_V);
    hz_kernels_1_4_V     <= STD_LOGIC_VECTOR(int_hz_kernels_1_4_V);
    hz_kernels_1_5_V     <= STD_LOGIC_VECTOR(int_hz_kernels_1_5_V);
    hz_kernels_1_6_V     <= STD_LOGIC_VECTOR(int_hz_kernels_1_6_V);
    hz_kernels_2_0_V     <= STD_LOGIC_VECTOR(int_hz_kernels_2_0_V);
    hz_kernels_2_1_V     <= STD_LOGIC_VECTOR(int_hz_kernels_2_1_V);
    hz_kernels_2_2_V     <= STD_LOGIC_VECTOR(int_hz_kernels_2_2_V);
    hz_kernels_2_3_V     <= STD_LOGIC_VECTOR(int_hz_kernels_2_3_V);
    hz_kernels_2_4_V     <= STD_LOGIC_VECTOR(int_hz_kernels_2_4_V);
    hz_kernels_2_5_V     <= STD_LOGIC_VECTOR(int_hz_kernels_2_5_V);
    hz_kernels_2_6_V     <= STD_LOGIC_VECTOR(int_hz_kernels_2_6_V);
    vt_kernels_0_0_V     <= STD_LOGIC_VECTOR(int_vt_kernels_0_0_V);
    vt_kernels_0_1_V     <= STD_LOGIC_VECTOR(int_vt_kernels_0_1_V);
    vt_kernels_0_2_V     <= STD_LOGIC_VECTOR(int_vt_kernels_0_2_V);
    vt_kernels_0_3_V     <= STD_LOGIC_VECTOR(int_vt_kernels_0_3_V);
    vt_kernels_0_4_V     <= STD_LOGIC_VECTOR(int_vt_kernels_0_4_V);
    vt_kernels_0_5_V     <= STD_LOGIC_VECTOR(int_vt_kernels_0_5_V);
    vt_kernels_0_6_V     <= STD_LOGIC_VECTOR(int_vt_kernels_0_6_V);
    vt_kernels_1_0_V     <= STD_LOGIC_VECTOR(int_vt_kernels_1_0_V);
    vt_kernels_1_1_V     <= STD_LOGIC_VECTOR(int_vt_kernels_1_1_V);
    vt_kernels_1_2_V     <= STD_LOGIC_VECTOR(int_vt_kernels_1_2_V);
    vt_kernels_1_3_V     <= STD_LOGIC_VECTOR(int_vt_kernels_1_3_V);
    vt_kernels_1_4_V     <= STD_LOGIC_VECTOR(int_vt_kernels_1_4_V);
    vt_kernels_1_5_V     <= STD_LOGIC_VECTOR(int_vt_kernels_1_5_V);
    vt_kernels_1_6_V     <= STD_LOGIC_VECTOR(int_vt_kernels_1_6_V);
    vt_kernels_2_0_V     <= STD_LOGIC_VECTOR(int_vt_kernels_2_0_V);
    vt_kernels_2_1_V     <= STD_LOGIC_VECTOR(int_vt_kernels_2_1_V);
    vt_kernels_2_2_V     <= STD_LOGIC_VECTOR(int_vt_kernels_2_2_V);
    vt_kernels_2_3_V     <= STD_LOGIC_VECTOR(int_vt_kernels_2_3_V);
    vt_kernels_2_4_V     <= STD_LOGIC_VECTOR(int_vt_kernels_2_4_V);
    vt_kernels_2_5_V     <= STD_LOGIC_VECTOR(int_vt_kernels_2_5_V);
    vt_kernels_2_6_V     <= STD_LOGIC_VECTOR(int_vt_kernels_2_6_V);
    config_V             <= STD_LOGIC_VECTOR(int_config_V);
    divisor_0_V          <= STD_LOGIC_VECTOR(int_divisor_0_V);
    divisor_1_V          <= STD_LOGIC_VECTOR(int_divisor_1_V);
    divisor_2_V          <= STD_LOGIC_VECTOR(int_divisor_2_V);

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_start <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                    int_ap_start <= '1';
                elsif (int_ap_ready = '1') then
                    int_ap_start <= int_auto_restart; -- clear on handshake/auto restart
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_done <= '0';
            elsif (ACLK_EN = '1') then
                if (ap_done = '1') then
                    int_ap_done <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_AP_CTRL) then
                    int_ap_done <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_auto_restart <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1') then
                    int_auto_restart <= WDATA(7);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_gie <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_GIE and WSTRB(0) = '1') then
                    int_gie <= WDATA(0);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ier <= "00";
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_IER and WSTRB(0) = '1') then
                    int_ier <= UNSIGNED(WDATA(1 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_isr(0) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(0) = '1' and ap_done = '1') then
                    int_isr(0) <= '1';
                elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                    int_isr(0) <= int_isr(0) xor WDATA(0); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_isr(1) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(1) = '1' and ap_ready = '1') then
                    int_isr(1) <= '1';
                elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                    int_isr(1) <= int_isr(1) xor WDATA(1); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_IMG_WIDTH_V_DATA_0) then
                    int_IMG_WIDTH_V(10 downto 0) <= (UNSIGNED(WDATA(10 downto 0)) and wmask(10 downto 0)) or ((not wmask(10 downto 0)) and int_IMG_WIDTH_V(10 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_IMG_HEIGHT_V_DATA_0) then
                    int_IMG_HEIGHT_V(10 downto 0) <= (UNSIGNED(WDATA(10 downto 0)) and wmask(10 downto 0)) or ((not wmask(10 downto 0)) and int_IMG_HEIGHT_V(10 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_HZ_KERNELS_0_0_V_DATA_0) then
                    int_hz_kernels_0_0_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_hz_kernels_0_0_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_HZ_KERNELS_0_1_V_DATA_0) then
                    int_hz_kernels_0_1_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_hz_kernels_0_1_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_HZ_KERNELS_0_2_V_DATA_0) then
                    int_hz_kernels_0_2_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_hz_kernels_0_2_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_HZ_KERNELS_0_3_V_DATA_0) then
                    int_hz_kernels_0_3_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_hz_kernels_0_3_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_HZ_KERNELS_0_4_V_DATA_0) then
                    int_hz_kernels_0_4_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_hz_kernels_0_4_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_HZ_KERNELS_0_5_V_DATA_0) then
                    int_hz_kernels_0_5_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_hz_kernels_0_5_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_HZ_KERNELS_0_6_V_DATA_0) then
                    int_hz_kernels_0_6_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_hz_kernels_0_6_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_HZ_KERNELS_1_0_V_DATA_0) then
                    int_hz_kernels_1_0_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_hz_kernels_1_0_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_HZ_KERNELS_1_1_V_DATA_0) then
                    int_hz_kernels_1_1_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_hz_kernels_1_1_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_HZ_KERNELS_1_2_V_DATA_0) then
                    int_hz_kernels_1_2_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_hz_kernels_1_2_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_HZ_KERNELS_1_3_V_DATA_0) then
                    int_hz_kernels_1_3_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_hz_kernels_1_3_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_HZ_KERNELS_1_4_V_DATA_0) then
                    int_hz_kernels_1_4_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_hz_kernels_1_4_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_HZ_KERNELS_1_5_V_DATA_0) then
                    int_hz_kernels_1_5_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_hz_kernels_1_5_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_HZ_KERNELS_1_6_V_DATA_0) then
                    int_hz_kernels_1_6_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_hz_kernels_1_6_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_HZ_KERNELS_2_0_V_DATA_0) then
                    int_hz_kernels_2_0_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_hz_kernels_2_0_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_HZ_KERNELS_2_1_V_DATA_0) then
                    int_hz_kernels_2_1_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_hz_kernels_2_1_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_HZ_KERNELS_2_2_V_DATA_0) then
                    int_hz_kernels_2_2_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_hz_kernels_2_2_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_HZ_KERNELS_2_3_V_DATA_0) then
                    int_hz_kernels_2_3_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_hz_kernels_2_3_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_HZ_KERNELS_2_4_V_DATA_0) then
                    int_hz_kernels_2_4_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_hz_kernels_2_4_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_HZ_KERNELS_2_5_V_DATA_0) then
                    int_hz_kernels_2_5_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_hz_kernels_2_5_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_HZ_KERNELS_2_6_V_DATA_0) then
                    int_hz_kernels_2_6_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_hz_kernels_2_6_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_VT_KERNELS_0_0_V_DATA_0) then
                    int_vt_kernels_0_0_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_vt_kernels_0_0_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_VT_KERNELS_0_1_V_DATA_0) then
                    int_vt_kernels_0_1_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_vt_kernels_0_1_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_VT_KERNELS_0_2_V_DATA_0) then
                    int_vt_kernels_0_2_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_vt_kernels_0_2_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_VT_KERNELS_0_3_V_DATA_0) then
                    int_vt_kernels_0_3_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_vt_kernels_0_3_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_VT_KERNELS_0_4_V_DATA_0) then
                    int_vt_kernels_0_4_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_vt_kernels_0_4_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_VT_KERNELS_0_5_V_DATA_0) then
                    int_vt_kernels_0_5_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_vt_kernels_0_5_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_VT_KERNELS_0_6_V_DATA_0) then
                    int_vt_kernels_0_6_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_vt_kernels_0_6_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_VT_KERNELS_1_0_V_DATA_0) then
                    int_vt_kernels_1_0_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_vt_kernels_1_0_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_VT_KERNELS_1_1_V_DATA_0) then
                    int_vt_kernels_1_1_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_vt_kernels_1_1_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_VT_KERNELS_1_2_V_DATA_0) then
                    int_vt_kernels_1_2_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_vt_kernels_1_2_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_VT_KERNELS_1_3_V_DATA_0) then
                    int_vt_kernels_1_3_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_vt_kernels_1_3_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_VT_KERNELS_1_4_V_DATA_0) then
                    int_vt_kernels_1_4_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_vt_kernels_1_4_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_VT_KERNELS_1_5_V_DATA_0) then
                    int_vt_kernels_1_5_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_vt_kernels_1_5_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_VT_KERNELS_1_6_V_DATA_0) then
                    int_vt_kernels_1_6_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_vt_kernels_1_6_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_VT_KERNELS_2_0_V_DATA_0) then
                    int_vt_kernels_2_0_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_vt_kernels_2_0_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_VT_KERNELS_2_1_V_DATA_0) then
                    int_vt_kernels_2_1_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_vt_kernels_2_1_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_VT_KERNELS_2_2_V_DATA_0) then
                    int_vt_kernels_2_2_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_vt_kernels_2_2_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_VT_KERNELS_2_3_V_DATA_0) then
                    int_vt_kernels_2_3_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_vt_kernels_2_3_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_VT_KERNELS_2_4_V_DATA_0) then
                    int_vt_kernels_2_4_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_vt_kernels_2_4_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_VT_KERNELS_2_5_V_DATA_0) then
                    int_vt_kernels_2_5_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_vt_kernels_2_5_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_VT_KERNELS_2_6_V_DATA_0) then
                    int_vt_kernels_2_6_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_vt_kernels_2_6_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_CONFIG_V_DATA_0) then
                    int_config_V(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_config_V(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_DIVISOR_0_V_DATA_0) then
                    int_divisor_0_V(19 downto 0) <= (UNSIGNED(WDATA(19 downto 0)) and wmask(19 downto 0)) or ((not wmask(19 downto 0)) and int_divisor_0_V(19 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_DIVISOR_1_V_DATA_0) then
                    int_divisor_1_V(19 downto 0) <= (UNSIGNED(WDATA(19 downto 0)) and wmask(19 downto 0)) or ((not wmask(19 downto 0)) and int_divisor_1_V(19 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_DIVISOR_2_V_DATA_0) then
                    int_divisor_2_V(19 downto 0) <= (UNSIGNED(WDATA(19 downto 0)) and wmask(19 downto 0)) or ((not wmask(19 downto 0)) and int_divisor_2_V(19 downto 0));
                end if;
            end if;
        end if;
    end process;


-- ----------------------- Memory logic ------------------

end architecture behave;
