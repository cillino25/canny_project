-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sepImageFilter_hz_filter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    pixelIn_V : IN STD_LOGIC_VECTOR (15 downto 0);
    end_row_V : IN STD_LOGIC_VECTOR (0 downto 0);
    new_row_V : IN STD_LOGIC_VECTOR (0 downto 0);
    hz_coeff_0_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_coeff_1_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_coeff_2_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_coeff_3_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_coeff_4_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_coeff_5_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_coeff_6_V : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (26 downto 0) );
end;


architecture behav of sepImageFilter_hz_filter is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_pp0_stg0_fsm_0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_pp0_stg0_fsm_0 : STD_LOGIC;
    signal ap_sig_18 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal hz_pixelDelay_V_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal hz_pixelDelay_V_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal hz_pixelDelay_V_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal hz_window_V_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal hz_window_V_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal hz_window_V_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal hz_window_V_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal hz_window_V_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal hz_window_V_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal grp_sepImageFilter_hz_macOp_fu_106_hz_window_pixels_0_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sepImageFilter_hz_macOp_fu_106_hz_window_pixels_1_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sepImageFilter_hz_macOp_fu_106_hz_window_pixels_2_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sepImageFilter_hz_macOp_fu_106_hz_window_pixels_3_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sepImageFilter_hz_macOp_fu_106_hz_window_pixels_4_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sepImageFilter_hz_macOp_fu_106_hz_window_pixels_6_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sepImageFilter_hz_macOp_fu_106_ap_return : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_sepImageFilter_hz_macOp_fu_106_ap_ce : STD_LOGIC;
    signal storemerge_fu_178_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal storemerge1_fu_197_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal storemerge2_fu_216_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal storemerge3_fu_235_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal hz_window_V_load_fu_254_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal hz_window_V_load_pixelIn_V_fu_269_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_pprstidle_pp0 : STD_LOGIC;

    component sepImageFilter_hz_macOp IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        hz_coeff_0_V : IN STD_LOGIC_VECTOR (7 downto 0);
        hz_coeff_1_V : IN STD_LOGIC_VECTOR (7 downto 0);
        hz_coeff_2_V : IN STD_LOGIC_VECTOR (7 downto 0);
        hz_coeff_3_V : IN STD_LOGIC_VECTOR (7 downto 0);
        hz_coeff_4_V : IN STD_LOGIC_VECTOR (7 downto 0);
        hz_coeff_5_V : IN STD_LOGIC_VECTOR (7 downto 0);
        hz_coeff_6_V : IN STD_LOGIC_VECTOR (7 downto 0);
        hz_window_pixels_0_V : IN STD_LOGIC_VECTOR (15 downto 0);
        hz_window_pixels_1_V : IN STD_LOGIC_VECTOR (15 downto 0);
        hz_window_pixels_2_V : IN STD_LOGIC_VECTOR (15 downto 0);
        hz_window_pixels_3_V : IN STD_LOGIC_VECTOR (15 downto 0);
        hz_window_pixels_4_V : IN STD_LOGIC_VECTOR (15 downto 0);
        hz_window_pixels_5_V : IN STD_LOGIC_VECTOR (15 downto 0);
        hz_window_pixels_6_V : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (26 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;



begin
    grp_sepImageFilter_hz_macOp_fu_106 : component sepImageFilter_hz_macOp
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        hz_coeff_0_V => hz_coeff_0_V,
        hz_coeff_1_V => hz_coeff_1_V,
        hz_coeff_2_V => hz_coeff_2_V,
        hz_coeff_3_V => hz_coeff_3_V,
        hz_coeff_4_V => hz_coeff_4_V,
        hz_coeff_5_V => hz_coeff_5_V,
        hz_coeff_6_V => hz_coeff_6_V,
        hz_window_pixels_0_V => grp_sepImageFilter_hz_macOp_fu_106_hz_window_pixels_0_V,
        hz_window_pixels_1_V => grp_sepImageFilter_hz_macOp_fu_106_hz_window_pixels_1_V,
        hz_window_pixels_2_V => grp_sepImageFilter_hz_macOp_fu_106_hz_window_pixels_2_V,
        hz_window_pixels_3_V => grp_sepImageFilter_hz_macOp_fu_106_hz_window_pixels_3_V,
        hz_window_pixels_4_V => grp_sepImageFilter_hz_macOp_fu_106_hz_window_pixels_4_V,
        hz_window_pixels_5_V => hz_window_V_load_fu_254_p3,
        hz_window_pixels_6_V => grp_sepImageFilter_hz_macOp_fu_106_hz_window_pixels_6_V,
        ap_return => grp_sepImageFilter_hz_macOp_fu_106_ap_return,
        ap_ce => grp_sepImageFilter_hz_macOp_fu_106_ap_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)) or not((ap_const_logic_1 = ap_ce)))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)) or not((ap_const_logic_1 = ap_ce))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)) or not((ap_const_logic_1 = ap_ce))))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)) or not((ap_const_logic_1 = ap_ce))))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then
                hz_pixelDelay_V_1 <= hz_pixelDelay_V_2;
                hz_pixelDelay_V_2 <= hz_pixelDelay_V_3;
                hz_pixelDelay_V_3 <= pixelIn_V;
                hz_window_V_1 <= storemerge_fu_178_p3;
                hz_window_V_2 <= storemerge1_fu_197_p3;
                hz_window_V_3 <= storemerge2_fu_216_p3;
                hz_window_V_4 <= storemerge3_fu_235_p3;
                hz_window_V_5 <= hz_window_V_load_fu_254_p3;
                hz_window_V_6 <= hz_window_V_load_pixelIn_V_fu_269_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_ce, ap_sig_pprstidle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_pp0_stg0_fsm_0 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it4, ap_ce)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it3) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it4))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_ppiten_pp0_it0 <= ap_start;
    ap_return <= grp_sepImageFilter_hz_macOp_fu_106_ap_return;

    ap_sig_18_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_18 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_0_assign_proc : process(ap_sig_18)
    begin
        if (ap_sig_18) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_pprstidle_pp0_assign_proc : process(ap_start, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it3))) then 
            ap_sig_pprstidle_pp0 <= ap_const_logic_1;
        else 
            ap_sig_pprstidle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_sepImageFilter_hz_macOp_fu_106_ap_ce_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            grp_sepImageFilter_hz_macOp_fu_106_ap_ce <= ap_const_logic_1;
        else 
            grp_sepImageFilter_hz_macOp_fu_106_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_sepImageFilter_hz_macOp_fu_106_hz_window_pixels_0_V <= 
        hz_pixelDelay_V_1 when (new_row_V(0) = '1') else 
        hz_window_V_1;
    grp_sepImageFilter_hz_macOp_fu_106_hz_window_pixels_1_V <= 
        hz_pixelDelay_V_1 when (new_row_V(0) = '1') else 
        hz_window_V_2;
    grp_sepImageFilter_hz_macOp_fu_106_hz_window_pixels_2_V <= 
        hz_pixelDelay_V_1 when (new_row_V(0) = '1') else 
        hz_window_V_3;
    grp_sepImageFilter_hz_macOp_fu_106_hz_window_pixels_3_V <= 
        hz_pixelDelay_V_1 when (new_row_V(0) = '1') else 
        hz_window_V_4;
    grp_sepImageFilter_hz_macOp_fu_106_hz_window_pixels_4_V <= 
        hz_pixelDelay_V_2 when (new_row_V(0) = '1') else 
        hz_window_V_5;
    grp_sepImageFilter_hz_macOp_fu_106_hz_window_pixels_6_V <= 
        hz_window_V_load_fu_254_p3 when (end_row_V(0) = '1') else 
        pixelIn_V;
    hz_window_V_load_fu_254_p3 <= 
        hz_pixelDelay_V_3 when (new_row_V(0) = '1') else 
        hz_window_V_6;
    hz_window_V_load_pixelIn_V_fu_269_p3 <= 
        hz_window_V_load_fu_254_p3 when (end_row_V(0) = '1') else 
        pixelIn_V;
    storemerge1_fu_197_p3 <= 
        hz_pixelDelay_V_1 when (new_row_V(0) = '1') else 
        hz_window_V_3;
    storemerge2_fu_216_p3 <= 
        hz_pixelDelay_V_1 when (new_row_V(0) = '1') else 
        hz_window_V_4;
    storemerge3_fu_235_p3 <= 
        hz_pixelDelay_V_2 when (new_row_V(0) = '1') else 
        hz_window_V_5;
    storemerge_fu_178_p3 <= 
        hz_pixelDelay_V_1 when (new_row_V(0) = '1') else 
        hz_window_V_2;
end behav;
