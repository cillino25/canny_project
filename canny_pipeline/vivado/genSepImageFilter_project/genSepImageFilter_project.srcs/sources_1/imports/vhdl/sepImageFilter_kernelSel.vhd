-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sepImageFilter_kernelSel is
port (
    select_V : IN STD_LOGIC_VECTOR (5 downto 0);
    hz_kernels_0_0_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_kernels_0_1_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_kernels_0_2_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_kernels_0_3_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_kernels_0_4_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_kernels_0_5_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_kernels_0_6_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_kernels_1_0_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_kernels_1_1_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_kernels_1_2_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_kernels_1_3_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_kernels_1_4_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_kernels_1_5_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_kernels_1_6_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_kernels_2_0_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_kernels_2_1_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_kernels_2_2_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_kernels_2_3_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_kernels_2_4_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_kernels_2_5_V : IN STD_LOGIC_VECTOR (7 downto 0);
    hz_kernels_2_6_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_kernels_0_0_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_kernels_0_1_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_kernels_0_2_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_kernels_0_3_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_kernels_0_4_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_kernels_0_5_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_kernels_0_6_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_kernels_1_0_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_kernels_1_1_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_kernels_1_2_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_kernels_1_3_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_kernels_1_4_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_kernels_1_5_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_kernels_1_6_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_kernels_2_0_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_kernels_2_1_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_kernels_2_2_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_kernels_2_3_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_kernels_2_4_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_kernels_2_5_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_kernels_2_6_V : IN STD_LOGIC_VECTOR (7 downto 0);
    divisor_0_V : IN STD_LOGIC_VECTOR (19 downto 0);
    divisor_1_V : IN STD_LOGIC_VECTOR (19 downto 0);
    divisor_2_V : IN STD_LOGIC_VECTOR (19 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of sepImageFilter_kernelSel is 
    constant ap_true : BOOLEAN := true;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal tmp_fu_380_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal div_V_write_assign_fu_552_p5 : STD_LOGIC_VECTOR (19 downto 0);
    signal hz_kernel_0_V_write_assign_fu_384_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal hz_kernel_1_V_write_assign_fu_408_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal hz_kernel_2_V_write_assign_fu_432_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal hz_kernel_3_V_write_assign_fu_456_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal hz_kernel_4_V_write_assign_fu_480_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal hz_kernel_5_V_write_assign_fu_504_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal hz_kernel_6_V_write_assign_fu_528_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal vt_kernel_0_V_write_assign_fu_396_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal vt_kernel_1_V_write_assign_fu_420_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal vt_kernel_2_V_write_assign_fu_444_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal vt_kernel_3_V_write_assign_fu_468_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal vt_kernel_4_V_write_assign_fu_492_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal vt_kernel_5_V_write_assign_fu_516_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal vt_kernel_6_V_write_assign_fu_540_p5 : STD_LOGIC_VECTOR (7 downto 0);

    component sepImageFilter_mux_3to1_sel2_8_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sepImageFilter_mux_3to1_sel2_20_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        din2 : IN STD_LOGIC_VECTOR (19 downto 0);
        din3 : IN STD_LOGIC_VECTOR (19 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    sepImageFilter_mux_3to1_sel2_8_1_U1 : component sepImageFilter_mux_3to1_sel2_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din1 => hz_kernels_0_0_V,
        din2 => hz_kernels_1_0_V,
        din3 => hz_kernels_2_0_V,
        din4 => tmp_fu_380_p1,
        dout => hz_kernel_0_V_write_assign_fu_384_p5);

    sepImageFilter_mux_3to1_sel2_8_1_U2 : component sepImageFilter_mux_3to1_sel2_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din1 => vt_kernels_0_0_V,
        din2 => vt_kernels_1_0_V,
        din3 => vt_kernels_2_0_V,
        din4 => tmp_fu_380_p1,
        dout => vt_kernel_0_V_write_assign_fu_396_p5);

    sepImageFilter_mux_3to1_sel2_8_1_U3 : component sepImageFilter_mux_3to1_sel2_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din1 => hz_kernels_0_1_V,
        din2 => hz_kernels_1_1_V,
        din3 => hz_kernels_2_1_V,
        din4 => tmp_fu_380_p1,
        dout => hz_kernel_1_V_write_assign_fu_408_p5);

    sepImageFilter_mux_3to1_sel2_8_1_U4 : component sepImageFilter_mux_3to1_sel2_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din1 => vt_kernels_0_1_V,
        din2 => vt_kernels_1_1_V,
        din3 => vt_kernels_2_1_V,
        din4 => tmp_fu_380_p1,
        dout => vt_kernel_1_V_write_assign_fu_420_p5);

    sepImageFilter_mux_3to1_sel2_8_1_U5 : component sepImageFilter_mux_3to1_sel2_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din1 => hz_kernels_0_2_V,
        din2 => hz_kernels_1_2_V,
        din3 => hz_kernels_2_2_V,
        din4 => tmp_fu_380_p1,
        dout => hz_kernel_2_V_write_assign_fu_432_p5);

    sepImageFilter_mux_3to1_sel2_8_1_U6 : component sepImageFilter_mux_3to1_sel2_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din1 => vt_kernels_0_2_V,
        din2 => vt_kernels_1_2_V,
        din3 => vt_kernels_2_2_V,
        din4 => tmp_fu_380_p1,
        dout => vt_kernel_2_V_write_assign_fu_444_p5);

    sepImageFilter_mux_3to1_sel2_8_1_U7 : component sepImageFilter_mux_3to1_sel2_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din1 => hz_kernels_0_3_V,
        din2 => hz_kernels_1_3_V,
        din3 => hz_kernels_2_3_V,
        din4 => tmp_fu_380_p1,
        dout => hz_kernel_3_V_write_assign_fu_456_p5);

    sepImageFilter_mux_3to1_sel2_8_1_U8 : component sepImageFilter_mux_3to1_sel2_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din1 => vt_kernels_0_3_V,
        din2 => vt_kernels_1_3_V,
        din3 => vt_kernels_2_3_V,
        din4 => tmp_fu_380_p1,
        dout => vt_kernel_3_V_write_assign_fu_468_p5);

    sepImageFilter_mux_3to1_sel2_8_1_U9 : component sepImageFilter_mux_3to1_sel2_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din1 => hz_kernels_0_4_V,
        din2 => hz_kernels_1_4_V,
        din3 => hz_kernels_2_4_V,
        din4 => tmp_fu_380_p1,
        dout => hz_kernel_4_V_write_assign_fu_480_p5);

    sepImageFilter_mux_3to1_sel2_8_1_U10 : component sepImageFilter_mux_3to1_sel2_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din1 => vt_kernels_0_4_V,
        din2 => vt_kernels_1_4_V,
        din3 => vt_kernels_2_4_V,
        din4 => tmp_fu_380_p1,
        dout => vt_kernel_4_V_write_assign_fu_492_p5);

    sepImageFilter_mux_3to1_sel2_8_1_U11 : component sepImageFilter_mux_3to1_sel2_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din1 => hz_kernels_0_5_V,
        din2 => hz_kernels_1_5_V,
        din3 => hz_kernels_2_5_V,
        din4 => tmp_fu_380_p1,
        dout => hz_kernel_5_V_write_assign_fu_504_p5);

    sepImageFilter_mux_3to1_sel2_8_1_U12 : component sepImageFilter_mux_3to1_sel2_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din1 => vt_kernels_0_5_V,
        din2 => vt_kernels_1_5_V,
        din3 => vt_kernels_2_5_V,
        din4 => tmp_fu_380_p1,
        dout => vt_kernel_5_V_write_assign_fu_516_p5);

    sepImageFilter_mux_3to1_sel2_8_1_U13 : component sepImageFilter_mux_3to1_sel2_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din1 => hz_kernels_0_6_V,
        din2 => hz_kernels_1_6_V,
        din3 => hz_kernels_2_6_V,
        din4 => tmp_fu_380_p1,
        dout => hz_kernel_6_V_write_assign_fu_528_p5);

    sepImageFilter_mux_3to1_sel2_8_1_U14 : component sepImageFilter_mux_3to1_sel2_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din1 => vt_kernels_0_6_V,
        din2 => vt_kernels_1_6_V,
        din3 => vt_kernels_2_6_V,
        din4 => tmp_fu_380_p1,
        dout => vt_kernel_6_V_write_assign_fu_540_p5);

    sepImageFilter_mux_3to1_sel2_20_1_U15 : component sepImageFilter_mux_3to1_sel2_20_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 20,
        din2_WIDTH => 20,
        din3_WIDTH => 20,
        din4_WIDTH => 2,
        dout_WIDTH => 20)
    port map (
        din1 => divisor_0_V,
        din2 => divisor_1_V,
        din3 => divisor_2_V,
        din4 => tmp_fu_380_p1,
        dout => div_V_write_assign_fu_552_p5);




    ap_return_0 <= div_V_write_assign_fu_552_p5;
    ap_return_1 <= hz_kernel_0_V_write_assign_fu_384_p5;
    ap_return_10 <= vt_kernel_2_V_write_assign_fu_444_p5;
    ap_return_11 <= vt_kernel_3_V_write_assign_fu_468_p5;
    ap_return_12 <= vt_kernel_4_V_write_assign_fu_492_p5;
    ap_return_13 <= vt_kernel_5_V_write_assign_fu_516_p5;
    ap_return_14 <= vt_kernel_6_V_write_assign_fu_540_p5;
    ap_return_2 <= hz_kernel_1_V_write_assign_fu_408_p5;
    ap_return_3 <= hz_kernel_2_V_write_assign_fu_432_p5;
    ap_return_4 <= hz_kernel_3_V_write_assign_fu_456_p5;
    ap_return_5 <= hz_kernel_4_V_write_assign_fu_480_p5;
    ap_return_6 <= hz_kernel_5_V_write_assign_fu_504_p5;
    ap_return_7 <= hz_kernel_6_V_write_assign_fu_528_p5;
    ap_return_8 <= vt_kernel_0_V_write_assign_fu_396_p5;
    ap_return_9 <= vt_kernel_1_V_write_assign_fu_420_p5;
    tmp_fu_380_p1 <= select_V(2 - 1 downto 0);
end behav;
