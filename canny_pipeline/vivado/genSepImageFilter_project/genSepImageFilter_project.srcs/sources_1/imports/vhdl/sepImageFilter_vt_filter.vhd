-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sepImageFilter_vt_filter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    hz_pixelOut_V : IN STD_LOGIC_VECTOR (26 downto 0);
    end_columns_V : IN STD_LOGIC_VECTOR (0 downto 0);
    row_to_duplicate_V : IN STD_LOGIC_VECTOR (2 downto 0);
    vt_coeff_0_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_coeff_1_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_coeff_2_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_coeff_3_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_coeff_4_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_coeff_5_V : IN STD_LOGIC_VECTOR (7 downto 0);
    vt_coeff_6_V : IN STD_LOGIC_VECTOR (7 downto 0);
    col_V : IN STD_LOGIC_VECTOR (10 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (36 downto 0) );
end;


architecture behav of sepImageFilter_vt_filter is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_pp0_stg0_fsm_0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_A1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_pp0_stg0_fsm_0 : STD_LOGIC;
    signal ap_sig_18 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal lineBuffer_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal lineBuffer_V_ce0 : STD_LOGIC;
    signal lineBuffer_V_q0 : STD_LOGIC_VECTOR (161 downto 0);
    signal lineBuffer_V_ce1 : STD_LOGIC;
    signal lineBuffer_V_we1 : STD_LOGIC;
    signal lineBuffer_V_d1 : STD_LOGIC_VECTOR (161 downto 0);
    signal vt_coeff_6_V_read_2_reg_384 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_vt_coeff_6_V_read_2_reg_384_pp0_iter1 : STD_LOGIC_VECTOR (7 downto 0);
    signal vt_coeff_5_V_read11_reg_389 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_vt_coeff_5_V_read11_reg_389_pp0_iter1 : STD_LOGIC_VECTOR (7 downto 0);
    signal vt_coeff_4_V_read_2_reg_394 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_vt_coeff_4_V_read_2_reg_394_pp0_iter1 : STD_LOGIC_VECTOR (7 downto 0);
    signal vt_coeff_3_V_read_2_reg_399 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_vt_coeff_3_V_read_2_reg_399_pp0_iter1 : STD_LOGIC_VECTOR (7 downto 0);
    signal vt_coeff_2_V_read_2_reg_404 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_vt_coeff_2_V_read_2_reg_404_pp0_iter1 : STD_LOGIC_VECTOR (7 downto 0);
    signal vt_coeff_1_V_read_2_reg_409 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_vt_coeff_1_V_read_2_reg_409_pp0_iter1 : STD_LOGIC_VECTOR (7 downto 0);
    signal vt_coeff_0_V_read_2_reg_414 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_vt_coeff_0_V_read_2_reg_414_pp0_iter1 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_to_duplicate_V_read_reg_419 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_row_to_duplicate_V_read_reg_419_pp0_iter1 : STD_LOGIC_VECTOR (2 downto 0);
    signal end_columns_V_read_reg_429 : STD_LOGIC_VECTOR (0 downto 0);
    signal hz_pixelOut_V_read_reg_434 : STD_LOGIC_VECTOR (26 downto 0);
    signal lineBuffer_V_addr_reg_439 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_lineBuffer_V_addr_reg_439_pp0_iter1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_445 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_icmp_reg_445_pp0_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_450 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_450_pp0_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_214_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_9_reg_455 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_s_reg_461 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_1_reg_467 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_2_reg_473 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_3_reg_479 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_5_fu_258_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_5_reg_485 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_19_hz_pixelOut_V_fu_268_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_19_hz_pixelOut_V_reg_491 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_10_fu_274_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_497 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_502 : STD_LOGIC_VECTOR (134 downto 0);
    signal grp_sepImageFilter_vt_macOp_fu_167_vt_window_pixels_0_V : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_sepImageFilter_vt_macOp_fu_167_vt_window_pixels_1_V : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_sepImageFilter_vt_macOp_fu_167_vt_window_pixels_2_V : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_sepImageFilter_vt_macOp_fu_167_vt_window_pixels_3_V : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_sepImageFilter_vt_macOp_fu_167_vt_window_pixels_4_V : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_sepImageFilter_vt_macOp_fu_167_vt_window_pixels_5_V : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_sepImageFilter_vt_macOp_fu_167_vt_window_pixels_6_V : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sepImageFilter_vt_macOp_fu_167_ap_return : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_sepImageFilter_vt_macOp_fu_167_ap_ce : STD_LOGIC;
    signal tmp_fu_185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_190_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_300_p9 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_4_2_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_4_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_5_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_6_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_pprstidle_pp0 : STD_LOGIC;

    component sepImageFilter_vt_macOp IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        vt_coeff_0_V : IN STD_LOGIC_VECTOR (7 downto 0);
        vt_coeff_1_V : IN STD_LOGIC_VECTOR (7 downto 0);
        vt_coeff_2_V : IN STD_LOGIC_VECTOR (7 downto 0);
        vt_coeff_3_V : IN STD_LOGIC_VECTOR (7 downto 0);
        vt_coeff_4_V : IN STD_LOGIC_VECTOR (7 downto 0);
        vt_coeff_5_V : IN STD_LOGIC_VECTOR (7 downto 0);
        vt_coeff_6_V : IN STD_LOGIC_VECTOR (7 downto 0);
        vt_window_pixels_0_V : IN STD_LOGIC_VECTOR (26 downto 0);
        vt_window_pixels_1_V : IN STD_LOGIC_VECTOR (26 downto 0);
        vt_window_pixels_2_V : IN STD_LOGIC_VECTOR (26 downto 0);
        vt_window_pixels_3_V : IN STD_LOGIC_VECTOR (26 downto 0);
        vt_window_pixels_4_V : IN STD_LOGIC_VECTOR (26 downto 0);
        vt_window_pixels_5_V : IN STD_LOGIC_VECTOR (26 downto 0);
        vt_window_pixels_6_V : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (36 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component sepImageFilter_mux_7to1_sel3_27_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (26 downto 0);
        din2 : IN STD_LOGIC_VECTOR (26 downto 0);
        din3 : IN STD_LOGIC_VECTOR (26 downto 0);
        din4 : IN STD_LOGIC_VECTOR (26 downto 0);
        din5 : IN STD_LOGIC_VECTOR (26 downto 0);
        din6 : IN STD_LOGIC_VECTOR (26 downto 0);
        din7 : IN STD_LOGIC_VECTOR (26 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component sepImageFilter_vt_filter_lineBuffer_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (161 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (161 downto 0) );
    end component;



begin
    lineBuffer_V_U : component sepImageFilter_vt_filter_lineBuffer_V
    generic map (
        DataWidth => 162,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lineBuffer_V_address0,
        ce0 => lineBuffer_V_ce0,
        q0 => lineBuffer_V_q0,
        address1 => ap_reg_ppstg_lineBuffer_V_addr_reg_439_pp0_iter1,
        ce1 => lineBuffer_V_ce1,
        we1 => lineBuffer_V_we1,
        d1 => lineBuffer_V_d1);

    grp_sepImageFilter_vt_macOp_fu_167 : component sepImageFilter_vt_macOp
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        vt_coeff_0_V => ap_reg_ppstg_vt_coeff_0_V_read_2_reg_414_pp0_iter1,
        vt_coeff_1_V => ap_reg_ppstg_vt_coeff_1_V_read_2_reg_409_pp0_iter1,
        vt_coeff_2_V => ap_reg_ppstg_vt_coeff_2_V_read_2_reg_404_pp0_iter1,
        vt_coeff_3_V => ap_reg_ppstg_vt_coeff_3_V_read_2_reg_399_pp0_iter1,
        vt_coeff_4_V => ap_reg_ppstg_vt_coeff_4_V_read_2_reg_394_pp0_iter1,
        vt_coeff_5_V => ap_reg_ppstg_vt_coeff_5_V_read11_reg_389_pp0_iter1,
        vt_coeff_6_V => ap_reg_ppstg_vt_coeff_6_V_read_2_reg_384_pp0_iter1,
        vt_window_pixels_0_V => grp_sepImageFilter_vt_macOp_fu_167_vt_window_pixels_0_V,
        vt_window_pixels_1_V => grp_sepImageFilter_vt_macOp_fu_167_vt_window_pixels_1_V,
        vt_window_pixels_2_V => grp_sepImageFilter_vt_macOp_fu_167_vt_window_pixels_2_V,
        vt_window_pixels_3_V => grp_sepImageFilter_vt_macOp_fu_167_vt_window_pixels_3_V,
        vt_window_pixels_4_V => grp_sepImageFilter_vt_macOp_fu_167_vt_window_pixels_4_V,
        vt_window_pixels_5_V => grp_sepImageFilter_vt_macOp_fu_167_vt_window_pixels_5_V,
        vt_window_pixels_6_V => grp_sepImageFilter_vt_macOp_fu_167_vt_window_pixels_6_V,
        ap_return => grp_sepImageFilter_vt_macOp_fu_167_ap_return,
        ap_ce => grp_sepImageFilter_vt_macOp_fu_167_ap_ce);

    sepImageFilter_mux_7to1_sel3_27_1_U126 : component sepImageFilter_mux_7to1_sel3_27_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 27,
        din2_WIDTH => 27,
        din3_WIDTH => 27,
        din4_WIDTH => 27,
        din5_WIDTH => 27,
        din6_WIDTH => 27,
        din7_WIDTH => 27,
        din8_WIDTH => 3,
        dout_WIDTH => 27)
    port map (
        din1 => tmp_9_reg_455,
        din2 => tmp_s_reg_461,
        din3 => tmp_1_reg_467,
        din4 => tmp_2_reg_473,
        din5 => tmp_3_reg_479,
        din6 => tmp_5_reg_485,
        din7 => tmp_19_hz_pixelOut_V_reg_491,
        din8 => ap_reg_ppstg_row_to_duplicate_V_read_reg_419_pp0_iter1,
        dout => tmp_8_fu_300_p9);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)) or not((ap_const_logic_1 = ap_ce)))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)) or not((ap_const_logic_1 = ap_ce))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)) or not((ap_const_logic_1 = ap_ce))))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)) or not((ap_const_logic_1 = ap_ce))))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)) or not((ap_const_logic_1 = ap_ce))))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)) or not((ap_const_logic_1 = ap_ce))))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)) or not((ap_const_logic_1 = ap_ce))))) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)) or not((ap_const_logic_1 = ap_ce))))) then 
                    ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)) or not((ap_const_logic_1 = ap_ce))))) then 
                    ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then
                ap_reg_ppstg_icmp_reg_445_pp0_iter1 <= icmp_reg_445;
                ap_reg_ppstg_lineBuffer_V_addr_reg_439_pp0_iter1 <= lineBuffer_V_addr_reg_439;
                ap_reg_ppstg_row_to_duplicate_V_read_reg_419_pp0_iter1 <= row_to_duplicate_V_read_reg_419;
                ap_reg_ppstg_tmp_12_reg_450_pp0_iter1 <= tmp_12_reg_450;
                ap_reg_ppstg_vt_coeff_0_V_read_2_reg_414_pp0_iter1 <= vt_coeff_0_V_read_2_reg_414;
                ap_reg_ppstg_vt_coeff_1_V_read_2_reg_409_pp0_iter1 <= vt_coeff_1_V_read_2_reg_409;
                ap_reg_ppstg_vt_coeff_2_V_read_2_reg_404_pp0_iter1 <= vt_coeff_2_V_read_2_reg_404;
                ap_reg_ppstg_vt_coeff_3_V_read_2_reg_399_pp0_iter1 <= vt_coeff_3_V_read_2_reg_399;
                ap_reg_ppstg_vt_coeff_4_V_read_2_reg_394_pp0_iter1 <= vt_coeff_4_V_read_2_reg_394;
                ap_reg_ppstg_vt_coeff_5_V_read11_reg_389_pp0_iter1 <= vt_coeff_5_V_read11_reg_389;
                ap_reg_ppstg_vt_coeff_6_V_read_2_reg_384_pp0_iter1 <= vt_coeff_6_V_read_2_reg_384;
                end_columns_V_read_reg_429 <= end_columns_V;
                hz_pixelOut_V_read_reg_434 <= hz_pixelOut_V;
                icmp_reg_445 <= icmp_fu_200_p2;
                lineBuffer_V_addr_reg_439 <= tmp_fu_185_p1(11 - 1 downto 0);
                row_to_duplicate_V_read_reg_419 <= row_to_duplicate_V;
                tmp_10_reg_497 <= tmp_10_fu_274_p1;
                tmp_12_reg_450 <= row_to_duplicate_V(2 downto 2);
                tmp_19_hz_pixelOut_V_reg_491 <= tmp_19_hz_pixelOut_V_fu_268_p3;
                tmp_1_reg_467 <= lineBuffer_V_q0(80 downto 54);
                tmp_2_reg_473 <= lineBuffer_V_q0(107 downto 81);
                tmp_3_reg_479 <= lineBuffer_V_q0(134 downto 108);
                tmp_5_reg_485 <= lineBuffer_V_q0(161 downto 135);
                tmp_6_reg_502 <= lineBuffer_V_q0(161 downto 27);
                tmp_9_reg_455 <= tmp_9_fu_214_p1;
                tmp_s_reg_461 <= lineBuffer_V_q0(53 downto 27);
                vt_coeff_0_V_read_2_reg_414 <= vt_coeff_0_V;
                vt_coeff_1_V_read_2_reg_409 <= vt_coeff_1_V;
                vt_coeff_2_V_read_2_reg_404 <= vt_coeff_2_V;
                vt_coeff_3_V_read_2_reg_399 <= vt_coeff_3_V;
                vt_coeff_4_V_read_2_reg_394 <= vt_coeff_4_V;
                vt_coeff_5_V_read11_reg_389 <= vt_coeff_5_V;
                vt_coeff_6_V_read_2_reg_384 <= vt_coeff_6_V;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_ce, ap_sig_pprstidle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_pp0_stg0_fsm_0 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it9, ap_ce)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it9) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it5, ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp0_it8, ap_reg_ppiten_pp0_it9)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it3) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it4) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it6) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it7) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it8) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it9))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_ppiten_pp0_it0 <= ap_start;
    ap_return <= grp_sepImageFilter_vt_macOp_fu_167_ap_return;

    ap_sig_18_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_18 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_0_assign_proc : process(ap_sig_18)
    begin
        if (ap_sig_18) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_pprstidle_pp0_assign_proc : process(ap_start, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it5, ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp0_it8)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it3) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it4) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it6) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it7) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it8))) then 
            ap_sig_pprstidle_pp0 <= ap_const_logic_1;
        else 
            ap_sig_pprstidle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_sepImageFilter_vt_macOp_fu_167_ap_ce_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            grp_sepImageFilter_vt_macOp_fu_167_ap_ce <= ap_const_logic_1;
        else 
            grp_sepImageFilter_vt_macOp_fu_167_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_sepImageFilter_vt_macOp_fu_167_vt_window_pixels_0_V <= 
        tmp_9_reg_455 when (tmp_4_fu_295_p2(0) = '1') else 
        tmp_8_fu_300_p9;
    grp_sepImageFilter_vt_macOp_fu_167_vt_window_pixels_1_V <= 
        tmp_8_fu_300_p9 when (ap_reg_ppstg_icmp_reg_445_pp0_iter1(0) = '1') else 
        tmp_s_reg_461;
    grp_sepImageFilter_vt_macOp_fu_167_vt_window_pixels_2_V <= 
        tmp_8_fu_300_p9 when (tmp_4_2_fu_327_p2(0) = '1') else 
        tmp_1_reg_467;
    grp_sepImageFilter_vt_macOp_fu_167_vt_window_pixels_3_V <= 
        tmp_8_fu_300_p9 when (ap_reg_ppstg_tmp_12_reg_450_pp0_iter1(0) = '1') else 
        tmp_2_reg_473;
    grp_sepImageFilter_vt_macOp_fu_167_vt_window_pixels_4_V <= 
        tmp_8_fu_300_p9 when (tmp_4_4_fu_347_p2(0) = '1') else 
        tmp_3_reg_479;
    grp_sepImageFilter_vt_macOp_fu_167_vt_window_pixels_5_V <= 
        tmp_8_fu_300_p9 when (tmp_4_5_fu_360_p2(0) = '1') else 
        tmp_5_reg_485;
    grp_sepImageFilter_vt_macOp_fu_167_vt_window_pixels_6_V <= (tmp_4_6_fu_373_p2 or tmp_10_reg_497);
    icmp_fu_200_p2 <= "0" when (tmp_11_fu_190_p4 = ap_const_lv2_0) else "1";
    lineBuffer_V_address0 <= tmp_fu_185_p1(11 - 1 downto 0);

    lineBuffer_V_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            lineBuffer_V_ce0 <= ap_const_logic_1;
        else 
            lineBuffer_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuffer_V_ce1_assign_proc : process(ap_start, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it2, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            lineBuffer_V_ce1 <= ap_const_logic_1;
        else 
            lineBuffer_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    lineBuffer_V_d1 <= (tmp_19_hz_pixelOut_V_reg_491 & tmp_6_reg_502);

    lineBuffer_V_we1_assign_proc : process(ap_start, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it2, ap_ce)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce)))) then 
            lineBuffer_V_we1 <= ap_const_logic_1;
        else 
            lineBuffer_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_274_p1 <= tmp_19_hz_pixelOut_V_fu_268_p3(1 - 1 downto 0);
    tmp_11_fu_190_p4 <= row_to_duplicate_V(2 downto 1);
    tmp_19_hz_pixelOut_V_fu_268_p3 <= 
        tmp_5_fu_258_p4 when (end_columns_V_read_reg_429(0) = '1') else 
        hz_pixelOut_V_read_reg_434;
    tmp_4_2_fu_327_p2 <= "1" when (unsigned(ap_reg_ppstg_row_to_duplicate_V_read_reg_419_pp0_iter1) > unsigned(ap_const_lv3_2)) else "0";
    tmp_4_4_fu_347_p2 <= "1" when (unsigned(ap_reg_ppstg_row_to_duplicate_V_read_reg_419_pp0_iter1) > unsigned(ap_const_lv3_4)) else "0";
    tmp_4_5_fu_360_p2 <= "1" when (unsigned(ap_reg_ppstg_row_to_duplicate_V_read_reg_419_pp0_iter1) > unsigned(ap_const_lv3_5)) else "0";
    tmp_4_6_fu_373_p2 <= "1" when (ap_reg_ppstg_row_to_duplicate_V_read_reg_419_pp0_iter1 = ap_const_lv3_7) else "0";
    tmp_4_fu_295_p2 <= "1" when (ap_reg_ppstg_row_to_duplicate_V_read_reg_419_pp0_iter1 = ap_const_lv3_0) else "0";
    tmp_5_fu_258_p4 <= lineBuffer_V_q0(161 downto 135);
    tmp_9_fu_214_p1 <= lineBuffer_V_q0(27 - 1 downto 0);
    tmp_fu_185_p1 <= std_logic_vector(resize(unsigned(col_V),64));
end behav;
